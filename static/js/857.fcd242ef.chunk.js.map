{"version":3,"file":"static/js/857.fcd242ef.chunk.js","mappings":"wKACA,EAAuB,sBAAvB,EAA+D,iCAA/D,EAA0G,yBAA1G,EAAiJ,6BAAjJ,EAA2L,4BAA3L,EAAkO,0B,mBCQrNA,EAAa,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,KAAKC,EAA6B,EAA7BA,GAC7B,OACI,gBAAKC,UAAWC,EAAhB,UACI,SAAC,KAAD,CAASC,GAAE,mBAAcH,GAAzB,SAAgCD,OCN/BK,EAAU,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,KACrB,OACI,2BAAMA,GACF,sB,oECJNC,GAAeC,EAAAA,EAAAA,GAAiB,IAEzBC,EAAiB,SAACC,GAC3B,OACI,kBAAMC,SAAUD,EAAME,aAAtB,WACI,SAACC,EAAA,EAAD,CAAOb,KAAM,OAAQc,YAAa,qBAAsBC,UAAWC,EAAAA,EAC5DC,SAAU,CAACC,EAAAA,EAAUX,MAC5B,mBACA,iDCiDZ,GADyBY,EAAAA,EAAAA,IArCT,WAEZ,IAAMC,GAAWC,EAAAA,EAAAA,MAEjB,GAA2BC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAA0BA,EAAMC,QAAQC,gBAAxEC,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,OAEXC,GAAsBC,EAAAA,EAAAA,GAA8B,CACtDC,KAAM,cADkBD,CAEzBpB,GAUH,OACI,iBAAKP,UAAWC,EAAhB,WACI,qCACA,iBAAKD,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,UACI,gBAAKD,UAAWC,EAAhB,SACKwB,EAAOI,KAAI,SAACJ,GAAD,OAAwB,SAAC5B,EAAD,CAA4BC,KAAM2B,EAAO3B,KAC7BC,GAAI0B,EAAO1B,IADN0B,EAAO1B,YAIpE,iBAAKC,UAAWC,EAAhB,UACKuB,EAASK,KAAI,SAACL,GAAD,OAA2B,SAACrB,EAAD,CAA2BC,KAAMoB,EAASpB,MAA5BoB,EAASzB,QAChE,SAAC2B,EAAD,CAAqBjB,SAnBlB,SAACqB,GC5BK,IAAC1B,ED6BtB2B,QAAQC,IAAIF,GACRA,EAAS1B,KAAK6B,OAAOC,OAAS,GAC9BhB,GC/BkBd,ED+BK0B,EAAS1B,KC9BjC,CAAC+B,KAAMC,EAAAA,GAAiBC,QAASjC","sources":["webpack://samurai-way/./src/components/dialogs/Dialogs.module.css?04a9","components/dialogs/dialogItem/DialogItem.tsx","components/dialogs/message/Message.tsx","components/dialogs/message/AddMessageForm.tsx","components/dialogs/Dialogs.tsx","reducer/messageActions.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"back\":\"Dialogs_back__xn099\",\"dialogs_wrapper\":\"Dialogs_dialogs_wrapper__-eKzF\",\"dialogs\":\"Dialogs_dialogs__1MGJf\",\"dialogItems\":\"Dialogs_dialogItems__-Daej\",\"dialogItem\":\"Dialogs_dialogItem__e54rp\",\"messages\":\"Dialogs_messages__XOWte\",\"message\":\"Dialogs_message__+6FvU\"};","import React from 'react';\r\nimport s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemPropsType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport const DialogItem = ({name,id}: DialogItemPropsType) => {\r\n    return (\r\n        <div className={s.dialogItem}>\r\n            <NavLink to={`/dialogs/${id}`}>{name}</NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\n\r\ntype MessageType = {\r\n    text: string;\r\n}\r\n\r\nexport const Message = ({text}: MessageType) => {\r\n    return (\r\n        <div>{text}\r\n            <hr/>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport {Field} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators\";\r\nimport {TextArea} from \"../../common/formsControls/FormsControls\";\r\n\r\nconst maxLength100 = maxLengthCreator(10)\r\n\r\nexport const AddMessageForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field name={'text'} placeholder={'Enter your message'} component={TextArea}\r\n                   validate={[required, maxLength100]}/>\r\n            <br/>\r\n            <button>Send message</button>\r\n        </form>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {DialogItem} from \"./dialogItem/DialogItem\";\r\nimport {Message} from \"./message/Message\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addNewMessage} from \"../../reducer/messageActions\";\r\nimport {RootStateType} from \"../../reducer/store\";\r\nimport {WithAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {AddMessageForm} from \"./message/AddMessageForm\";\r\n\r\ntype AddMessageFormType = {\r\n    text: string\r\n}\r\n\r\nexport type MessageType = {\r\n    id: string\r\n    text: string\r\n}\r\nexport type DialogType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nconst Dialogs = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const {messages, dialog} = useSelector((state: RootStateType) => state.message.messagesPage)\r\n\r\n    const AddMessageReduxForm = reduxForm<AddMessageFormType>({\r\n        form: 'addMessage',\r\n    })(AddMessageForm)\r\n\r\n\r\n    const addMessage = (formData: { text: string }) => {\r\n        console.log(formData)\r\n        if (formData.text.trim().length > 0) {\r\n            dispatch(addNewMessage(formData.text))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.back}>\r\n            <h2>Dialogs</h2>\r\n            <div className={s.dialogs_wrapper}>\r\n                <div className={s.dialogs}>\r\n                    <div className={s.dialogItems}>\r\n                        {dialog.map((dialog: DialogType) => <DialogItem key={dialog.id} name={dialog.name}\r\n                                                                        id={dialog.id}/>)}\r\n                    </div>\r\n                </div>\r\n                <div className={s.messages}>\r\n                    {messages.map((messages: MessageType) => <Message key={messages.id} text={messages.text}/>)}\r\n                    <AddMessageReduxForm onSubmit={addMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst DialogsComponent = WithAuthRedirect(Dialogs);\r\nexport default DialogsComponent\r\n","import {ADD_NEW_MESSAGE} from \"./messageReducer\";\r\n\r\nexport type AddMessageType = {\r\n    type: typeof ADD_NEW_MESSAGE,\r\n    payload: string\r\n}\r\n\r\nexport const addNewMessage = (text: string): AddMessageType => {\r\n    return {type: ADD_NEW_MESSAGE, payload: text};\r\n}"],"names":["DialogItem","name","id","className","s","to","Message","text","maxLength100","maxLengthCreator","AddMessageForm","props","onSubmit","handleSubmit","Field","placeholder","component","TextArea","validate","required","WithAuthRedirect","dispatch","useDispatch","useSelector","state","message","messagesPage","messages","dialog","AddMessageReduxForm","reduxForm","form","map","formData","console","log","trim","length","type","ADD_NEW_MESSAGE","payload"],"sourceRoot":""}